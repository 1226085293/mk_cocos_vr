// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: post-process2-vs
      frag: post-process2-fs
      phase: post-process2
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
}%

CCProgram post-process2-vs %{
  precision highp float;
  #include <input-standard>
  #include <cc-global>
  #include <common>

  out vec2 v_uv;

  void main () {
    StandardVertInput In;
    CCVertInput(In);
    CC_HANDLE_GET_CLIP_FLIP(In.position.xy);
    gl_Position = In.position;
    gl_Position.y = gl_Position.y;
    v_uv = a_texCoord;
  }
}%

CCProgram post-process2-fs %{
  precision highp float;
  #include <cc-global>
  #include <anti-aliasing>
  in vec2 v_uv;

  layout(binding = 0) uniform sampler2D outputResultMap;

  layout(location = 0) out vec4 fragColor;

void texcoords(vec2 fragCoord, vec2 resolution,
			out vec2 v_rgbNW, out vec2 v_rgbNE,
			out vec2 v_rgbSW, out vec2 v_rgbSE,
			out vec2 v_rgbM) {
        vec2 inverseVP = 1.0 / resolution.xy;
        v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;
        v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;
        v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;
        v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;
        v_rgbM = vec2(fragCoord * inverseVP);
}


vec2 post_process_crt(vec2 uv_pos_v2_, float bend_f_) {
	// -1.0 ~ 1.0
	uv_pos_v2_ = (uv_pos_v2_ - 0.5) * 2.0;

  // 缩放 uv，增加差异范围
	uv_pos_v2_ *= 1.5;

  // uv 变形
  // 由于 uv_pos_v2_.y 范围在（-1.0，1.0），所以 abs（uv_pos_v2_.y）越大则结果越大，0 为正常结果
  // pow((abs(uv_pos_v2_.y) / bend_f_), 2.0) 的结果由于 abs(uv_pos_v2_.y）不会超过 1.0，所以 uv_pos_v2_.x 不会超过自己2倍
	uv_pos_v2_.x *= 1.0 + pow((abs(uv_pos_v2_.y) / bend_f_), 2.0);
	uv_pos_v2_.y *= 1.0 + pow((abs(uv_pos_v2_.x) / bend_f_), 2.0);

	// 转换回 0.0 - 1.0 空间
	uv_pos_v2_  = (uv_pos_v2_ / 2.0) + 0.5;

	return uv_pos_v2_;
}

void main () {
    mediump vec2 v_rgbNW;
	  mediump vec2 v_rgbNE;
	  mediump vec2 v_rgbSW;
	  mediump vec2 v_rgbSE;
  	mediump vec2 v_rgbM;



    // uv 居中
    vec2 v_uv2 = vec2(v_uv.x, v_uv.y + 0.25);

    // 移动uv
    // if (v_uv.x < 0.5) {
    //   v_uv2.x += 0.05 * sin(cc_time.x);
    // } else {
    //   v_uv2.x -= 0.05 * sin(cc_time.x);
    // }

    // uv 分块
    vec2 v_uv3 = mod(v_uv2 * 2.0, 1.0);
    // CRT 效果
    v_uv3 = post_process_crt(v_uv3, 2.0);
    // 过滤画面
    if (v_uv2.y < 0.5 || v_uv2.y > 1.0 || v_uv3.x < 0.0 || v_uv3.x > 1.0 || v_uv3.y < 0.0 || v_uv3.y > 1.0) {
      discard;
    }

    #if ANTIALIAS_TYPE == 1
      vec2 resolution = cc_screenSize.xy;
      vec2 fragCoord = v_uv3 * resolution;
      texcoords(fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);
      fragColor = fxaa(outputResultMap, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);
    #else
      fragColor = texture(outputResultMap, v_uv3);
    #endif
  }
}%
